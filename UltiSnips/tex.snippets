global !p
# from vim import *
import re
import os

strip = 8 # maxlength per item in reference completion
complete_length = 80 # maxlength per item in reference completion

# Returns the rest of 'end' in the matching snippet name
# For a snippet name of "get(ra?n?g?e?)?" and 'end' of
# 'range' gives 'nge' if regex match was 'getra'
def match_arg(end):
	ret = match.group(0)
	if match.group(2):
		ret += end[len(match.group(2)):]
	return ret

#  Returns a list of all the matches in all the
#  .tex files in the current directory
def find_in_files(regex, group_number):
	lines   = []
	for f in os.listdir(os.getcwd()):
		if f.endswith(".tex"):
			fd = open(f)
			lines += fd.readlines()
			fd.close()

	ref     = re.compile(regex)
	matches  = []
	for m in lines:
		for mm in ref.finditer(m):
			mmm = mm.group(group_number)
			if mmm:
				matches.append(mmm)
	return matches

# Helper to add square brackets in
# latex options, where there should
# only be square brackets if there is
# content in the option
def check(a, b):
	try:
		last = t[b+1]
	except:
		last = t[0]
	if last and not t[b]:
			snip.rv = ""
	else:
		snip.rv = a


def lb(a):
	check("[", a)

def rb(a):
	check("]", a)

# Prettyfies the concatenation of an array
def join(array):
	if len(array) == "":
		return ""
	if len(array) == 1:
		return "( " + array[0] + " )"
	return "( " + " | ".join(array) + " )"

# Returns the matching 'words' with 'w', and only
# returns the end of the matches.
# Ex: wo: gives 'rds' and 'rld' for 'words' and 'world'
def complete(w, words):
	opts  = [ m[len(w):] for m in words if m.startswith(w) ]
	if len(opts) == 1:
		return opts[0]
	elif len(opts) == 0:
		return join(["No alternatives"])

	truncated = []
	for mm in opts:
		if len(mm) > strip:
			truncated.append(mm[:strip] + "..")
		else:
			truncated.append(mm)

	joined = join(opts)
	if len(joined) > complete_length:
		return joined[:complete_length] + "..."
	else:
		return joined

# Completes some of the most important command names in latex
def command_complete(w):
	words = [ "Cref", "Gamma", "Phi", "jmath", "linewidth", "neq",
	"newenvironment", "paragraph", "parindent", "pi", "renewenvironment",
	"rightarrow", "section", "sl", "succeq", "textwidth", "underbrace",
	"uparrow", "zeta", "Box", "Delta", "Downarrow", "Lambda",
	"Leftarrow", "Leftrightarrow", "Omega", "Pi", "Psi", "Rightarrow",
	"Sigma", "Theta", "Uparrow", "Upsilon", "Xi", "alpha", "author",
	"begin", "beta", "bf", "caption", "cdot", "centering", "chapter",
	"chi", "psi", "columnsep", "columnwidth", "cref", "date",
	"delta", "downarrow", "emptyset" "end", "epsilon", "eta",
	"gamma", "imath", "infty", "int", "iota", "it", "kappa", "label",
	"lambda", "leftarrow", "leftrightarrow", "lim", "listoffigures",
	"listoftables", "lor", "maketitle", "month", "mu", "newcommand",
	"newline", "newpage", "noindent", "normalsize", "not", "notin",
	"nu", "omega", "parsep", "part", "partial", "phi", "pm", "prod",
	"renewcommand", "rho", "rm", "sc", "scriptsize", "sf", "sigma",
	"small", "subparagraph", "subsection", "subset", "subseteq",
	"subsubsection", "succ", "sum", "sup", "supset", "supseteq",
	"symbol", "tau", "textheight", "thanks", "theta", "tiny", "title",
	"to", "today", "topmargin", "tt", "underline", "updownarrow",
	"upsilon", "verb", "vfill", "vspace", "xi", "item"]
	return complete(w, words)

# Completes some of the most important environment names in latex
def environment_complete(w):
	words = [ "description", "eqnarray", "figure", "flushleft",
	"verbatim", "abstract", "align", "center", "displaymath", "document",
	"enumerate", "equation", "flushright", "itemize", "list", "listing",
	"minipage", "quotation", "quote", "scope", "table", "tabular",
	"theorem", "tikzpicture", "titlepage" ]
	return complete(w, words)
endglobal

snippet \\ "LaTeX environment" i
\\begin{$1}`!p lb(2)`$2`!p rb(2)`
	$3
\\end{$1}
endsnippet

snippet \ "LaTeX command" i
\\${1:cref}`!p snip.rv = command_complete(t[1])`{$2}`!p lb(3)`$3`!p rb(3)`
$4
endsnippet

snippet "begin\{(\w*)" "LaTeX environment" ir
`!p snip.rv = match.group(0)`${1:`!p
if not match.group(1):
	snip.rv = ""`}`!p
snip.rv = environment_complete(t[1])`}`!p lb(2)`$2`!p rb(2)`
	$0
end{$1`!p snip.rv = environment_complete(t[1])`}
endsnippet

snippet "sc?o?p?e?" "Scope environment" rb
\begin{scope}[$1]
	${0:${VISUAL}}
\end{scope}
endsnippet

snippet "ti?k?z?" "Tikz environment" rb
\begin{tikzpicture}`!p lb(1)`$1`!p rb(1)`
	${0:${VISUAL}}
\end{tikzpicture}
endsnippet

snippet "fi?g?u?r?e?" "Figure environment" rb
\begin{figure}[${1:htbp}]
	\centering
	${0:${VISUAL}}
	\caption{$2}
	\label{fig:${3:${2/(\w+).*/\L$1\E/a}}}
\end{figure}
endsnippet

snippet "be?g?i?n?" "Begin a block" rb
\begin{${1:itemize}}`!p lb(2)`$2`!p rb(2)`
	${0:${VISUAL}}
\end{$1}
endsnippet

snippet "glo?" "New glossary entry" rb
\newglossaryentry{${1:Reference name}}{
	name={${1/_/ /g}},
	description={${2:${VISUAL}}}
}
$0
endsnippet

snippet "lgl?o?" "Long new glossary entry" rb
\longnewglossaryentry{${1:Reference name}}{name={$2}}{%
${3:${VISUAL}}}
$0
endsnippet

snippet "no?t?bu?t?" "Not but" r
\notbut{${1:this}}{${2:that}} $0
endsnippet

snippet nor "Neither nor"
\neithernor{${1:this}}{${2:that}} $0
endsnippet

snippet eor "Either or"
\eitheror{${1:this}}{${2:that}} $0
endsnippet

snippet acr "Acronym" b
\newacronym{${1:Reference name}}{${1/([a-z])[a-z]+_?/\u$1/g}}{${1/([a-z]+)_|([a-z]+)/(?1:\u$1 )(?2:\u$2)/g}}
$0
endsnippet

snippet env "New environment" b
\newenvironment{${1:Environment name}}`!p lb(2)`${2:Argument count}`!p rb(2)`{%
${3:Begin block}}{%
${4:End block}}
$0
endsnippet

snippet nc "New command" b
\newcommand{\\${1:Command name}}`!p lb(2)`$2`!p rb(2)`{${3:${VISUAL:Command definition}}}
$0
endsnippet

snippet align "Math align" b
\begin{align}`!p lb(1)`$1`!p rb(1)`
	${0:${VISUAL}}
\end{align}
endsnippet

snippet "displ?a?y?" "Math display" rb
\begin{display}`!p lb(1)`$1`!p rb(1)`
	${0:${VISUAL}}
\end{display}
endsnippet

snippet "te?xt" "Math text" r
\text{${1:${VISUAL}}} $0
endsnippet

snippet emph "Emphasize"
\emph{${1:${VISUAL}}} $0
endsnippet

snippet "textit" "Italic"
\textit{${1:${VISUAL}}} $0
endsnippet

snippet "stro?n?g?" "Strong" r
\strong{${1:${VISUAL}}} $0
endsnippet

snippet end "End an environment" b
\end{$1}
$0
endsnippet

snippet use "Use package"
\usepackage`!p lb(1)`$1`!p rb(1)`{$2}
$0
endsnippet

snippet "capt?i?o?n?" "caption" rb
\caption{${1:${VISUAL}}}
$0
endsnippet

snippet "abst?r?a?c?t?" "Abstract" rb
\begin{abstract}
	${0:${VISUAL}}
\end{abstract}
endsnippet

snippet toc "Table of Contents" b
\tableofcontents
endsnippet

snippet "tit?l?e?" "Title" rb
\maketitle
endsnippet

snippet "(G|g)ls(pl?)?" "Glossary reference completion" r
`!p
snip.rv = match_arg("pl")
`{$1`!p
regex = r".*\\(long)?new(glossaryentry|acronym)\{(.*?)\}"
if not snip.c:
	results = find_in_files(regex, 3)
snip.rv = complete(t[1], results)
`}
endsnippet

snippet "(C|c|(N|n)ame|(P|p)age)?ref(ra?n?g?e?)?" "Reference completion" r
`!p
snip.rv = match_arg("range")
`{$1`!p
regex = r"\\label\{(.*?)\}"
if not snip.c:
	results = find_in_files(regex, 1)
snip.rv = complete(t[1], results)
`}
endsnippet

snippet "$\w+" "Inline math" ri
`!p snip.rv = match.group(0)`\$
endsnippet
